/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package component_toolbox_app;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Oluwole_Jnr
 */
public class SpectrumAnalyzerView extends javax.swing.JPanel {

    /**
     * Creates new form SpectrumAnalyzerView
     */
    public SpectrumAnalyzerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        frequencyField = new javax.swing.JTextField();
        samplingField = new javax.swing.JTextField();
        timePlotButton = new javax.swing.JButton();
        frequencyPlotButton = new javax.swing.JButton();
        internalFrame = new javax.swing.JInternalFrame();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Footlight MT Light", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 51));
        jLabel1.setText("SPECTRUM ANALYZER");

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("SIGNAL TYPE"));

        jRadioButton1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setMnemonic('1');
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("SINE WAVE");

        jRadioButton2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setMnemonic('2');
        jRadioButton2.setText("COSINE WAVE");

        jRadioButton3.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setMnemonic('3');
        jRadioButton3.setText("SQUARE WAVE");

        jLayeredPane1.setLayer(jRadioButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jRadioButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jRadioButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jRadioButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton2))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jRadioButton3)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("SIGNAL DETAILS"));

        jLabel2.setText("FREQUENCY");

        jLabel3.setText("SAMPLING FREQUENCY");

        frequencyField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                frequencyFieldKeyTyped(evt);
            }
        });

        samplingField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                samplingFieldKeyTyped(evt);
            }
        });

        jLayeredPane2.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(frequencyField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(samplingField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(frequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(samplingField))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(73, 73, 73)
                        .addComponent(jLabel3)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(samplingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        timePlotButton.setText("TIME PLOT");
        timePlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timePlotButtonActionPerformed(evt);
            }
        });

        frequencyPlotButton.setText("FREQUENCY PLOT");
        frequencyPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyPlotButtonActionPerformed(evt);
            }
        });

        internalFrame.setResizable(true);
        internalFrame.setTitle("PLOT PANEL");
        internalFrame.setVisible(true);

        javax.swing.GroupLayout internalFrameLayout = new javax.swing.GroupLayout(internalFrame.getContentPane());
        internalFrame.getContentPane().setLayout(internalFrameLayout);
        internalFrameLayout.setHorizontalGroup(
            internalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        internalFrameLayout.setVerticalGroup(
            internalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 422, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(internalFrame)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addComponent(timePlotButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(frequencyPlotButton)))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLayeredPane1)
                            .addComponent(jLayeredPane2))
                        .addGap(14, 14, 14)
                        .addComponent(internalFrame)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timePlotButton)
                            .addComponent(frequencyPlotButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void timePlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timePlotButtonActionPerformed
        //Validate Input
        Controller control = Controller.getControllerObject();
        int selected = buttonGroup1.getSelection().getMnemonic();
        String frequency = (String) frequencyField.getText();
        String sampling = (String) samplingField.getText();
        if (sampling.isEmpty()) {
            control.ErrorMessages("Please input a sampling frequency");
            return;
        } else if (((selected == 49) || (selected == 50)) && (frequency.isEmpty())) {
            control.ErrorMessages("Input the frequency of the carrier");
            return;
        }

        int freq = Integer.parseInt(frequency);
        int samp = Integer.parseInt(sampling);

        if (samp < (2 * freq) && (selected != 51)) {
            control.ErrorMessages("Please sample at atleast twice the frequency of the signal");
            return;
        }

        //Generate the required graphs
        switch (selected) {
            case 49:
                control.generateTimePlot(freq, samp, "SINE", null);
                break;
            case 50:
                control.generateTimePlot(freq, samp, "COSINE", null);
                break;
            case 51:
                String Bits = (String) JOptionPane.showInputDialog(this, "Input your bit sequence without commas (,)", "INPUT SEQUENCE", JOptionPane.INFORMATION_MESSAGE);
                boolean check2 = Bits.isEmpty();
                //Introduce check agaonst alphabets
                if (check2) {

                    control.ErrorMessages("Please input the bits to represent the square wave");
                    return;
                }
                int[] input = control.getBasebandBits(Bits);
                if (input == null) {
                    control.ErrorMessages("Input Error. Please use only 1 or 0");
                    return;
                }
                control.generateTimePlot(freq, samp, "SQUARE", input);
                break;
            default:
                break;
        }


    }//GEN-LAST:event_timePlotButtonActionPerformed

    //To make sure ony digits are enterd in the frequency field and not
    //alphabets
    private void frequencyFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_frequencyFieldKeyTyped
        char c = evt.getKeyChar();
        if ((!(Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_frequencyFieldKeyTyped

    //To make sure ony digits are enterd in the sampling Rate field and not
    //alphabets
    private void samplingFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_samplingFieldKeyTyped
        char c = evt.getKeyChar();
        if ((!(Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {

            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_samplingFieldKeyTyped

    private void frequencyPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyPlotButtonActionPerformed
//Validate Input
        Controller control = Controller.getControllerObject();
        int selected = buttonGroup1.getSelection().getMnemonic();
        String frequency = (String) frequencyField.getText();
        String sampling = (String) samplingField.getText();
        if (sampling.isEmpty()) {
            control.ErrorMessages("Please input a sampling frequency");
            return;
        } else if (((selected == 49) || (selected == 50)) && (frequency.isEmpty())) {
            control.ErrorMessages("Input the frequency of the carrier");
            return;
        }

        int freq = Integer.parseInt(frequency);
        int samp = Integer.parseInt(sampling);

        if (samp < (2 * freq) && (selected != 51)) {
            control.ErrorMessages("Please sample at atleast twice the frequency of the signal");
            return;
        }

        int n = (int) (Math.log(samp) / Math.log(2));

        if (samp != (1 << n)) {
            control.ErrorMessages("Sampling Frequency should be a number which is a power of 2");
            return;
        }

        //Generate Frequency Plot through FFT
        switch (selected) {
            case 49:
                control.generateSpectrum(freq, samp, "SINE", null);
                break;
            case 50:
                control.generateSpectrum(freq, samp, "COSINE", null);
                break;
            case 51:
                String Bits = (String) JOptionPane.showInputDialog(this, "Input your bit sequence without commas (,)", "INPUT SEQUENCE", JOptionPane.INFORMATION_MESSAGE);
                boolean check2 = Bits.isEmpty();
                //Introduce check agaonst alphabets
                if (check2) {

                    control.ErrorMessages("Please input the bits to represent the square wave");
                    return;
                }
                int[] input = control.getBasebandBits(Bits);
                if (input == null) {
                    control.ErrorMessages("Input Error. Please use only 1 or 0");
                    return;
                }
                control.generateSpectrum(freq, samp, "SQUARE", input);
                break;
            default:
                break;
        }


    }//GEN-LAST:event_frequencyPlotButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField frequencyField;
    private javax.swing.JButton frequencyPlotButton;
    public static javax.swing.JInternalFrame internalFrame;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JTextField samplingField;
    private javax.swing.JButton timePlotButton;
    // End of variables declaration//GEN-END:variables
}
